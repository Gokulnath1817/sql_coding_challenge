use ticket_booking_system2;
show tables;
--   TASK 2
-- 1) SQL Query to insert Sample Records
 
insert into venue (venue_name, address) values
('mumbai', 'marol andheri (w)'),
('chennai', 'IT Park'),
('pondicherry', 'state beach');
select * from venue;

insert into customer(customer_name, email, phone_number)
values
('harry potter', 'harry@gmail.com', '45454545'),
('ronald weasley','ron@gmail.com', '45454545'),
('hermione granger', 'her@gmail.com', '45454545'),
('draco malfoy', 'drac@gmail.com', '45454545'),
('ginni weasley', 'ginni@gmail.com', '45454545');


select * from customer;

insert into event(event_name,event_date, event_time,total_seats, available_seats, ticket_price,event_type, venue_id)
values
('Late Ms. Lata Mangeshkar Musical', '2021-09-12','20:00',320,270,600, 'concert',3),
('CSK vs RCB', '2024-04-11', '19:30',23000,3,3600, 'sports', 2),
('CSK vs RR', '2024-04-19', '19:30', 23000,10,3400, 'sports', 2),
('MI vs KKR', '2024-05-01', '15:30', 28000,100,8000, 'sports', 1);

select * from event;

insert into booking (event_id,customer_id,num_tickets,total_cost,booking_date)
values
(1,1,2,640,'2021-09-12'),
(1,4,3,960,'2021-09-12'),
(2,1,3,10800,'2024-04-11'),
(2,3,5,18000,'2024-04-10'),
(3,5,10,34000,'2024-04-15'),
(4,2,4,32000,'2024-05-01');

select*from booking;
-- 2)SQL query to list all events

select id,event_name as list_of_events
from event;
/*
output:
# id, list_of_events
'1', 'Late Ms. Lata Mangeshkar Musical'
'2', 'CSK vs RCB'
'3', 'CSK vs RR'
'4', 'MI vs KKR'
*/

-- 3)SQL Query to list all events with available seats
select id,event_name,total_seats,available_seats
from event
where available_seats > 0;
/*
output:
# id, event_name, total_seats, available_seats
'1', 'Late Ms. Lata Mangeshkar Musical', '320', '270'
'2', 'CSK vs RCB', '23000', '3'
'3', 'CSK vs RR', '23000', '10'
'4', 'MI vs KKR', '28000', '100'
*/

-- 4)SQL Query to select events name  partial match "cup"
select *
from event
where event_name like '%cup%';
/*
output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id
*/
-- 5)SQL Query to list events with ticket price range is between 1000 to 25000
select id,event_name,ticket_price from event
where ticket_price between 1000 and 2500;
/*
output:
id, event_name, ticket_price

*/
-- 6)SQL Query to select event within specific range
select * from 
event
where event_date between '2024-04-10' and '2024-05-10';
/*
output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id
'2', 'CSK vs RCB', '2024-04-11', '19:30', '23000', '3', '3600', 'sports', '2'
'3', 'CSK vs RR', '2024-04-19', '19:30', '23000', '10', '3400', 'sports', '2'
'4', 'MI vs KKR', '2024-05-01', '15:30', '28000', '100', '8000', 'sports', '1'
*/

-- 7)SQL Query to select event with available tickets and type is concert

select * from event
where available_seats>0 and event_type='concert';
/*
output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id
'1', 'Late Ms. Lata Mangeshkar Musical', '2021-09-12', '20:00', '320', '270', '600', 'concert', '3'
*/

-- 7)SQL Query to select event with available tickets and type is concert

-- 8)SQL Query to select booking details where num of tickets booked is > 4
select * from booking
where num_tickets >4;
/*
output:
# id, event_id, customer_id, num_tickets, total_cost, booking_date
'4', '2', '3', '5', '18000', '2024-04-10'
'5', '3', '5', '10', '34000', '2024-04-15'
*/
-- 9)SQL Query to retrive customer information where phone number ends with '000'
select * from customer
where phone_number like '%000';
/*
output:
# id, customer_name, email, phone_number

*/
-- 10)SQL Query to retrive events with seat capacity more than 15000
select * from event
where available_seats > 15000;
/*
output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id

*/

-- 11) select events with no x y z in name
select * from event
where event_name not like'x%' and event_name not like'y%'and event_name not like'z%';
/*
output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id
'1', 'Late Ms. Lata Mangeshkar Musical', '2021-09-12', '20:00', '320', '270', '600', 'concert', '3'
'2', 'CSK vs RCB', '2024-04-11', '19:30', '23000', '3', '3600', 'sports', '2'
'3', 'CSK vs RR', '2024-04-19', '19:30', '23000', '10', '3400', 'sports', '2'
'4', 'MI vs KKR', '2024-05-01', '15:30', '28000', '100', '8000', 'sports', '1'
*/
-- 12)Write a SQL query to retrieve users in batches Of 2, Starting from the 4th user.
select * from
customer
order by
id limit 3 offset 3;
/*
output:
# id, customer_name, email, phone_number
'4', 'draco malfoy', 'drac@gmail.com', '45454545'
'5', 'ginni weasley', 'ginni@gmail.com', '45454545'
*/

-- TASK3
-- 1)Write a SQL query to List Events and Their Average Ticket Prices.
select id,event_name,AVG(ticket_price) from event
group by event_name;
/*
output:
# id, event_name, AVG(ticket_price)
'2', 'CSK vs RCB', '3600'
'3', 'CSK vs RR', '3400'
'1', 'Late Ms. Lata Mangeshkar Musical', '600'
'4', 'MI vs KKR', '8000'
*/
-- 2)Write a SQL query to Calculate the Total Revenue Generated by Events.
select
SUM(total_cost) as total_revenue
from booking;
/*
output:
# total_revenue
'96400'
*/
/*3)Write a SQL query to find the event with the highest ticket sales.
projection:event
crieteria:booking
*/
select
e.event_name,
max(b.total_cost) AS highest_ticket_sales
from event e,booking b
where
e.id = b.event_id
group by
e.event_name;
/*
output:
# event_name, highest_ticket_sales
'CSK vs RCB', '18000'
'CSK vs RR', '34000'
'Late Ms. Lata Mangeshkar Musical', '960'
'MI vs KKR', '32000'
*/
/* 4)Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event.
projection:event
crieteria :booking
*/
select event_name,(total_seats-available_seats) as number_of_tickets_sold from event
group by event_name
order by number_of_tickets_sold;
/*
output:
# event_name, number_of_tickets_sold
'Late Ms. Lata Mangeshkar Musical', '50'
'CSK vs RR', '22990'
'CSK vs RCB', '22997'
'MI vs KKR', '27900'
*/

-- 5)Write a SQL query to Find Events with NO Ticket sales.
select * from event e
where  total_seats-available_seats<=0;
/*
output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id

*/
-- 6)Write a SQL query to Find the user Who Has Booked the Most Tickets
Select
c.customer_name,
b.customer_id,
SUM(b.num_tickets) AS total_tickets_booked
from
booking b, customer c
where b.customer_id = c.id
group by b.customer_id, c.customer_name
order by total_tickets_booked desc
limit 1;
/*
output:
# customer_name, customer_id, total_tickets_booked
'ginni weasley', '5', '10'
*/
-- 8)Write a SQL Query to calculate average ticket sales in each event
select v.venue_name,AVG(ticket_price) as average_price from 
event e ,venue v
where v.id=e.venue_id
group by v.venue_name; 
/*
output:
# venue_name, average_price
'chennai', '3500'
'mumbai', '8000'
'pondicherry', '600'
*/

-- 9)write a query to display num of tickets sold for each event type
select event_type,sum(total_seats-available_seats) as number_of_tickets_sold from event
group by event_type
order by number_of_tickets_sold;
/*
output:
# event_type, number_of_tickets_sold
'concert', '50'
'sports', '73887'
*/

-- 10)write a query to display revenue in each year

-- 11)Customers that booked more than one event
select c.customer_name,c.email,c.phone_number,count(distinct b.event_id) AS num_of_events_booked
from customer c JOIN booking b ON c.id = b.customer_id
group by c.customer_name
HAVING count(distinct b.event_id) > 1;
/*output:
# customer_name, email, phone_number, num_of_events_booked
'harry potter', 'harry@gmail.com', '45454545', '2'
*/

-- 12)Calculate total revenue generated for each user
/*
projection:
crieteria:
*/
select c.customer_name,sum(total_cost) AS total_revenue
from customer c JOIN booking b ON c.id = b.customer_id
group by c.customer_name;
/*
output:
# customer_name, total_revenue
'draco malfoy', '960'
'ginni weasley', '34000'
'harry potter', '11440'
'hermione granger', '18000'
'ronald weasley', '32000'
*/
-- 13) Calculate the average ticket price for events in each category and venue

select e.event_type, v.venue_name, AVG(e.ticket_price) from event e, venue v 
where e.venue_id=v.id group by e.event_type, v.venue_name;
/* 
output:
# event_type, venue_name, AVG(e.ticket_price)
'concert', 'pondicherry', '600'
'sports', 'chennai', '3500'
'sports', 'mumbai', '8000'
*/

-- 14)Calculate the number of years in last 30 days




-- TASK 4
-- 1)Calculate the average ticket price for each event type
select e.event_type,AVG(ticket_price) as average_ticket_price from 
venue v JOIN event e ON v.id=e.venue_id
group by e.event_type;
/*
output:
# event_type, average_ticket_price
'concert', '600'
'sports', '5000'
*/

-- 2)Find events with more than 50% of the tickets sold
/* total_tickets_sold=total_seats-available_seats
*/
select event_name,total_seats,available_seats from event
where (total_seats-available_seats) > (total_seats/2);
/*
output:
# event_name, total_seats, available_seats
'CSK vs RCB', '23000', '3'
'CSK vs RR', '23000', '10'
'MI vs KKR', '28000', '100'
*/

-- 3)Calculate the total nummber of tickets sold for each events
select event_name,(total_seats-available_seats) as number_of_tickets_sold from event
group by event_name
order by number_of_tickets_sold;
/*
output:
# event_name, number_of_tickets_sold
'Late Ms. Lata Mangeshkar Musical', '50'
'CSK vs RR', '22990'
'CSK vs RCB', '22997'
'MI vs KKR', '27900'
*/

-- 4)Find Customer who have not booked any tickets using Not exist sub query
select *
from customer
where id not in (select distinct c.id from customer c JOIN booking b ON c.id = b.customer_id );
/*
output:
# id, customer_name, email, phone_number

*/
-- 5)List events with no ticket sales using NOT IN
/*
no ticket sales=total_seats-available_seats >0
*/

select event_name, total_seats, available_seats 
from event 
where event_name NOT IN (
    select event_name 
    from event 
    where (total_seats - available_seats) > 0
);
/*
output:
event_name, total_seats, available_seats

*/
-- 6)Calculate the number of tickes sold for each event type using subquery in the FROM
select event_type,sum(total_seats-available_seats) as number_of_tickets_sold from event
group by event_type;
-- Using Sub Query in FROM
select dt.event_type,sum(dt.total_seats-dt.available_seats) as number_of_tickets_sold from(select * from event) as dt
group by dt.event_type;
/*
output:
# event_type, number_of_tickets_sold
'concert', '50'
'sports', '73887'
*/
-- 7)Calculate ticket prices higher than the average ticket price
select * from event
where ticket_price > (select AVG (ticket_price) from event);

/*output:
# id, event_name, event_date, event_time, total_seats, available_seats, ticket_price, event_type, venue_id
'4', 'MI vs KKR', '2024-05-01', '15:30', '28000', '100', '8000', 'sports', '1'
*/
-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
-- projection: customer
-- criteria: booking
select sum(b.total_cost)
from customer c join booking b on c.id = b.customer_id
group by c.customer_name;
/*
output:
# sum(b.total_cost)
'960'
'34000'
'11440'
'18000'
'32000'
*/

-- 9. List customers Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
-- projection: customers
-- criteria: venue
select *
from customer
where id in (select customer_id
					from booking
                    where event_id in (select id
										from event
                                        where venue_id in (select id
															from venue
                                                            where venue_name = 'mumbai')));

/*
output:
# id, customer_name, email, phone_number
'2', 'ronald weasley', 'ron@gmail.com', '45454545'
*/

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with Group by
-- projection: event
-- criteria: event
select sum(total_seats-available_seats)
from event e
group by event_type;
/*
output:
# sum(total_seats-available_seats)
'50'
'73887'
/*
 
 
